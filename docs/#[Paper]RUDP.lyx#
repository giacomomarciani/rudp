#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass llncs
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "RUDP"
\pdf_author "Giacomo Marciani"
\pdf_subject "Reliable User Datagram Protocol"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
RUSP
\end_layout

\begin_layout Subtitle
Reliable User Segment Protocol
\end_layout

\begin_layout Author
Giacomo Marciani
\end_layout

\begin_layout Institute
University of Rome Tor Vergata
\begin_inset Newline newline
\end_inset

giacomo.marciani@gmail.com
\end_layout

\begin_layout Abstract
We present the RUSP reliable transport protocol, and its official implementation
 
\shape slanted
librusp
\shape default
.
 It is well known that TCP provides a reliable congestion controlled communicati
on at a cost of overhead, whereas UDP provides efficiency at a cost of unreliabi
lity and congestion exposure.
 We would like to fill the TCP/UDP gap, developing an efficient reliable
 transport protocol for those applications that do not expose the connection
 end-points to the risk of congestion, thus not requiring neither congestion
 nor flow control.
 Still far from being able to aspire to a practice spread, RUSP, together
 with this paper, are meant to show how to design and realize a reliable
 transport protocol, alternative, though inspired, to existing transport
 protocols.
\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
In section 1, we introduce the RUSP protocol focusing on its reliable service-mo
del and segment structure.
\end_layout

\begin_layout Standard
In section 2, we introduce 
\shape slanted
librusp
\shape default
, the official implementation of the RUSP transport protocol, focusing on
 its architecture and API.
\end_layout

\begin_layout Standard
In section 3, we give an implementative example of a client-server model
 that makes use of 
\shape slanted
librusp
\shape default
.
\end_layout

\begin_layout Standard
In section 4, we show the experimental results, proving pros/cons and performanc
es of the protocol design and its implementative model.
\end_layout

\begin_layout Standard
In section 5, we state the future improvements of the protocol and the library.
\end_layout

\begin_layout Section
The RUSP Protocol
\end_layout

\begin_layout Standard
The Reliable User Segment Protocol (RUSP) is a connection-oriented reliable
 transport protocol that realizes a full-duplex unbounded
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
RUSP does not impose any kind of transmission rate constraint, whereas the
 TCP's congestion control necessarily imposes it.
\end_layout

\end_inset

 point-to-point communication.
 
\end_layout

\begin_layout Standard
Although clearly inspired by both the TCP, defined in 
\begin_inset CommandInset citation
LatexCommand cite
key "Transmission Control Protocol"

\end_inset

, and the UDP, defined in 
\begin_inset CommandInset citation
LatexCommand cite
key "User Datagram Protocol"

\end_inset

, RUSP significantly differs from both protocols.
 Actually, RUSP aims to fill the well-known gap between TCP and UDP, providing
 an efficient reliable service for those network applications that do not
 need neither congestion nor flow control.
\end_layout

\begin_layout Standard
In this section we will show the building blocks that realizes the RUSP
 reliable service, the RUSP segment structure and the pseudo-code of both
 the sender and receiving side of the RUSP connection.
\end_layout

\begin_layout Standard
In particular, we will focus on the RUSP finite state automaton, the connection
 establishment and shutdown, the SACK/CACKnoledgment discipline, the ISN
 computation, the sliding-window and the adaptive retransmission timeout.
 
\end_layout

\begin_layout Subsection
The Reliable Service
\end_layout

\begin_layout Standard
A transport protocol is said to be reliable, or it realizes a reliable service,
 if and only if its service-model guarantees a correct in-order delivery
 of encapsulated data.
 To achieve this, the protocol must keep track of some useful communication-stat
e information, thus implementing a connection-oriented service-model.
\end_layout

\begin_layout Subsubsection
The Finite State Automaton
\end_layout

\begin_layout Standard
When designing a connection-oriented protocol, the first topic to take into
 account is the design of the connection's finite state automaton.
 So, let us now show the RUSP FSA, wich is clearly inspired by the TCP FSA,
 defined in 
\begin_inset CommandInset citation
LatexCommand cite
key "Transmission Control Protocol"

\end_inset

.
 
\end_layout

\begin_layout Standard
The only difference with respect to the TCP's consists on the absence on
 the mutual transition between SYNSND and SYNRCV, and the presence of the
 transition from FINWT1 to TIMEWT, taken from 
\begin_inset CommandInset citation
LatexCommand cite
key "The Linux Programming Interface"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/rusp_fsa.png
	lyxscale 70
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RUSP Finite State Automaton
\begin_inset CommandInset label
LatexCommand label
name "Figure:RUSP Finite State Automaton"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Connection Establishment
\end_layout

\begin_layout Standard
The connection establishment allows the two connection end-points to synchronize
 their sequence number space.
 RUSP implements the connection establishment in the same way TCP does:
 thus realizing it by a 
\shape slanted
three-way handshake
\shape default
 procedure, during wich both connection end-points exchange their respective
 
\shape slanted
Initial Sequence Number (ISN)
\shape default
.
 See the next paragraph to go into details about ISN computation.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:Connection Establishment Usual"

\end_inset

 shows the usual RUSP three-way handshake.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/open_normal.png
	lyxscale 30
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Connection Establishment: usual case
\begin_inset CommandInset label
LatexCommand label
name "Figure:Connection Establishment Usual"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
ISN Computation
\end_layout

\begin_layout Standard
As previously seen, the connection establishment imposes to both the end-points
 to respectively exchange their locally run-time computed ISNs, so to realize
 the binding of the sequence spaces.
 Such a mechanism exposes the connection to an 
\shape slanted
ISN-guessing attack
\shape default
, eventually based on heuristic conjectures.
 The pseudo-randomly computation of the ISN should then reduce the exposure
 to such an attack.
\end_layout

\begin_layout Standard
As stated in 
\begin_inset CommandInset citation
LatexCommand cite
key "Defending against Sequence Number Attacks"

\end_inset

, we can prevent ISN-guessing attacks by giving each connection a 
\shape slanted
separate parametrized sequence space
\shape default
.
 Let us identify each connection with the following tuple
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Connection=(ip_{local},port_{local},ip_{peer},port_{peer})
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
and give a pseudo-random function 
\begin_inset Formula $F(C,K)$
\end_inset

 of the connection 
\begin_inset Formula $C$
\end_inset

, parametrized by some secret key 
\begin_inset Formula $K$
\end_inset

.
 Within each space, the ISN is incremented by 
\begin_inset Formula $M(t)$
\end_inset

 in a time-based fashion, according to 
\begin_inset CommandInset citation
LatexCommand cite
key "Transmission Control Protocol"

\end_inset

.
 As suggested in 
\begin_inset CommandInset citation
LatexCommand cite
key "Defending against Sequence Number Attacks"

\end_inset

, the MD5 cryptographic hashing, described in 
\begin_inset CommandInset citation
LatexCommand cite
key "The MD5 Message-Digest Algorithm"

\end_inset

, would be a good choice for the 
\begin_inset Formula $F$
\end_inset

 implementation.
\end_layout

\begin_layout Standard
Actually, the RUSP algorithm for the ISN computation realizes the following
 function
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
ISN=M(t)+MD5(C,K)
\end{equation}

\end_inset


\end_layout

\begin_layout Paragraph
Interesting Scenarios
\end_layout

\begin_layout Standard
Let us now consider an interesting scenario.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:Connection Establishment Loss"

\end_inset

 shows how RUSP recovers from segment loss during the connection establishment.
 Note that in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:Connection Establishment Loss"

\end_inset

 was omitted the FIN SACK's loss: the loss has been deriberately omitted
 due to the fact that the current version of the protocol does not provides
 any recovery procedure to this king of loss.
 See section 4 for futher details about FIN ACK's loss recovery.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/open_drop.png
	lyxscale 30
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Connection Establishment: segment loss recovery
\begin_inset CommandInset label
LatexCommand label
name "Figure:Connection Establishment Loss"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
The Connection Shutdown
\end_layout

\begin_layout Standard
The connection shutdown allows the two connection end-points to gently shutdown
 the connection.
 RUSP implements the connection shutdown in the same way TCP does: thus
 realizing it by a 
\shape slanted
four-way handshake
\shape default
 procedure.
\end_layout

\begin_layout Standard
Before going into details of the segment exchange required by the procedure,
 we first need to distinguish two kind of connection shutdown: the active
 close and the passive close.
 The connection shutdown is initiated by an active close, and terminated
 by a passive close.
 Futhermore, as TCP does, RUSP requires an extra-state TIMEWT to reliably
 complete the connection shutdown on the active close side.
 See the following paragraph to go into details about the TIMEWT state.
\end_layout

\begin_layout Standard
Notice that, as stated in 
\begin_inset CommandInset citation
LatexCommand cite
key "Transmission Control Protocol"

\end_inset

, forwarding a connection close request, both the active and the passive
 one, does not sound as an imposition to shutdown, but a declaration to
 have no more data to send.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/close_normal.png
	lyxscale 30
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Connection Shutdown: usual case
\begin_inset CommandInset label
LatexCommand label
name "Figure:Connection Shutdown Usual"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
TIMEWT State
\end_layout

\begin_layout Standard
Let us now give a short clarification about the TIMEWT state.
 The TIMEWT state purpose is to implement reliable connection termination
 and to allow expiration of old duplicate segments in the network.
 When opening a new connection, RUSP takes care to avoid new incarnation
 of connections in TIMEWT state.
 We notice that there is not an equivalent state for the passive close side
 of the connection: in fact, it does not require it because it can't be
 exposed to duplicate segments storm.
 As stated in 
\begin_inset CommandInset citation
LatexCommand cite
key "Transmission Control Protocol"

\end_inset

, the transition from TIMEWT state to the CLOSED state is taken in response
 of a timeout that is twice the Minimum Segment Lifetime.
 Although BSD socket implementation assumes a 30 seconds MSL, we decided
 to mediate this value with the 120 seconds MSL suggested in 
\begin_inset CommandInset citation
LatexCommand cite
key "Requirements for Internet Hosts Communication Layers"

\end_inset

: thus considering a 75 seconds MSL and 150 seconds TIMEWT timeout.
\end_layout

\begin_layout Paragraph
Interesting Scenarios
\end_layout

\begin_layout Standard
Let us now consider two interesting scenarios.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:Connection Shutdown Simultaneity"

\end_inset

 shows how RUSP recovers from simultaneous active close requests, while
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:Connection Shutdown Loss"

\end_inset

 shows how RUSP recovers from segment loss during the connection shutdown.
 In this latter scenario we may appreciate both the piggy-backed acknowledgement
 and the RUSP's FSA transition from state FINWT1 to state TIMEWT.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/close_simultaneous.png
	lyxscale 30
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Connection Shutdown: simultaneity
\begin_inset CommandInset label
LatexCommand label
name "Figure:Connection Shutdown Simultaneity"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/close_drop.png
	lyxscale 30
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Connection Shutdown: segment loss recovery
\begin_inset CommandInset label
LatexCommand label
name "Figure:Connection Shutdown Loss"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
The Acknowledge Discipline
\end_layout

\begin_layout Standard
RUSP employs an aknowledgement discipline that takes advantage of both the
 selective acknowledgement and cumulative acknowledgement.
\end_layout

\begin_layout Standard
As stated in 
\begin_inset CommandInset citation
LatexCommand cite
key "Computer Networking"

\end_inset

, the selective acknowledgement, provided by Selective-Repeat, minimizes
 redundant retransmissions with respect to the cumulative acknowledgement
 provided by the Go-Back-N.
\end_layout

\begin_layout Standard
RUSP employs a 
\shape slanted
SACK
\shape default
 segment (selective acknowledgement) to acknowledge a first-time received
 segment, while employs a 
\shape slanted
CACK
\shape default
 segment (cumulative acknowledgement) to acknowledge a redundant retransmission.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:Acknowledge Discipline Usual"

\end_inset

 shows a usual data communication scneario, in wich RUSP employs SACKs to
 acknowledge first-time received segments.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/communication_normal.png
	lyxscale 30
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Acknowledge Discipline: usual case
\begin_inset CommandInset label
LatexCommand label
name "Figure:Acknowledge Discipline Usual"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Interesting Scenarios
\end_layout

\begin_layout Standard
Let us now consider an interesting scenario.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:Acknowledge Discipline CACK"

\end_inset

 shows a typical scenario in wich RUSP takes advantage of CACK to immediately
 restore windows allignment after a storm of SACKs loss.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/communication_cack.png
	lyxscale 30
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Acknowledge Discipline: CACK advantages
\begin_inset CommandInset label
LatexCommand label
name "Figure:Acknowledge Discipline CACK"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
The Sliding-Window
\end_layout

\begin_layout Standard
RUSP is a 
\shape slanted
sliding-window protocol
\shape default
, in the sense stated in 
\begin_inset CommandInset citation
LatexCommand cite
key "Computer Networking"

\end_inset

: each outcoming segment is processed with respect to the outbox window,
 
\shape slanted
sndwnd
\shape default
, while each incoming segment is processed with respect to the inbox window,
 
\shape slanted
rcvwnd
\shape default
.
 Let us convince you that this mechanism, togheter with the acknowledge
 discipline, realizes the reliable service.
\end_layout

\begin_layout Paragraph
Oubox Window
\end_layout

\begin_layout Standard
The 
\shape slanted
sndwnd
\shape default
 partitions the sequence space of the outcoming segments.
 The sender shall send all those segments that fall within the sndwnd: the
 window size, 
\shape slanted
wnds=wnde-wndb
\shape default
, thus imposes an upper bound on the number of unACKed segments in pipeline.
 The window base, 
\shape slanted
wndb
\shape default
, is the sequence number of the oldest unACKed segment.
 The window next, 
\shape slanted
wndn
\shape default
, is the sequence number of the next segment to send.
 The window end, 
\shape slanted
wnde
\shape default
, is the sequence number of the first out-of-window segment, thus the first
 unsendable segment.
 Once 
\shape slanted
wndb
\shape default
 has been ACKed, the 
\shape slanted
sndwnd
\shape default
 shall slide to the next unACKed sequence number, thus allowing the sender
 to reliably proceeed its transmissions.
 
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:Outbox Sequence Space"

\end_inset

 let us clearify the above concepts.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/rusp_sndwnd.png
	lyxscale 17
	scale 17

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Outbox Sequence Space: 
\shape slanted
sndwnd
\begin_inset CommandInset label
LatexCommand label
name "Figure:Outbox Sequence Space"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Inbox Window
\end_layout

\begin_layout Standard
The 
\shape slanted
rcvwnd
\shape default
 partitions the sequence space of the incoming segments.
 The receiver shall receive all those segments that fall within the rcvwnd:
 the window size, 
\shape slanted
wnds=wnde-wndb
\shape default
, thus imposes an upper bound on the number of bufferable segments.
 The window base, 
\shape slanted
wndb
\shape default
, is the sequence number of the next expected in-order segment.
 The window end, 
\shape slanted
wnde
\shape default
, is the sequence number of the first out-of-window segment, thus the first
 unbufferable segment.
 Once 
\shape slanted
wndb
\shape default
 has been received, the 
\shape slanted
rcvwnd
\shape default
 shall slide to the next not received sequence number, thus allowing the
 receiver to reliably proceeed its receptions.
 
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:Inbox Sequence Space"

\end_inset

 let us clearify the above concepts.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/rusp_rcvwnd.png
	lyxscale 17
	scale 17

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Inbox Sequence Space: 
\shape slanted
rcvwnd
\begin_inset CommandInset label
LatexCommand label
name "Figure:Inbox Sequence Space"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Local Window and Peer Perception
\end_layout

\begin_layout Standard
Let us now point out a primary key-point in the understanding of a sliding-windo
w protocol.
 The local outbox[inbox] window does not only provides an effective mechanism
 to regulate local transmission[receptions], but also gives a local approximated
 reflection of the peer's inbox[outbox] window.
 Clearly, such an approximation is sensitive to segment loss: a single SACK
 loss is enough to misalign the local 
\shape slanted
sndwnd
\shape default
 with respect to the peer 
\shape slanted
rcvwnd
\shape default
.
 Such a misalignment may cause serious communication lacks: indeed, the
 sender may waste time and resources congesting the network and peer with
 redundant retransmissions.
 The RUSP's CACK acknowledgement allows the sender to restore the window
 allignment as soon as the first redundant retransmission has been received
 by the peer.
\end_layout

\begin_layout Subsubsection
The Retransmission Timeout
\end_layout

\begin_layout Standard
RUSP employs an adaptive time-based retransmission mechanism, thus it should
 pay particular attention to the timeout computation.
\end_layout

\begin_layout Standard
Clearly, the timeout should be larger than the connection's RTT, but how
 much larger? Indeed, a too short timeout would induce unnecessary retransmissio
n, while a too large timeout would lead to a serious performance lack in
 case of network congestion.
\end_layout

\begin_layout Standard
Ideally, the timeout must be istantaneously adapted to the expected RTT.
 Such a predictive model must take into account the current network congestion
 and the variability trends of its fluctuations.
\end_layout

\begin_layout Standard
As stated in 
\begin_inset CommandInset citation
LatexCommand cite
key "Computing TCP's Retransmission Timer"

\end_inset

, such a scenario can be effectively approximated by a EWMA statistical
 model, thus obtaining the following relations
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
extRTT=(1-\alpha)\cdot extRTT+\alpha\cdot samRTT
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
devRTT=(1-\beta)\cdot devRTT+\beta\cdot\mid samRTT-extRTT\mid
\end{equation}

\end_inset


\begin_inset Formula 
\begin{equation}
timeout=extRTT+\gamma\cdot devRTT
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\shape slanted
samRTT
\shape default
 is the RTT measured for the acknowledgement of a non retransmitted segment,
 
\shape slanted
extRTT
\shape default
 is the weight average of the measured RTTs, 
\shape slanted
devRTT
\shape default
 is the weight average of the deviations between the expected and measured
 RTTs, and 
\shape slanted
Timeout
\shape default
 is the current timeout value.
\end_layout

\begin_layout Standard
As stated in 
\begin_inset CommandInset citation
LatexCommand cite
key "Computing TCP's Retransmission Timer"

\end_inset

, the reccomended values of 
\begin_inset Formula $\alpha$
\end_inset

, 
\begin_inset Formula $\beta$
\end_inset

 and 
\begin_inset Formula $\gamma$
\end_inset

 are, respectively, 
\begin_inset Formula $\alpha=0.125$
\end_inset

, 
\begin_inset Formula $\beta=0.25$
\end_inset

 and 
\begin_inset Formula $\gamma=4$
\end_inset

.
 Such values of 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 induce a greater weight on recent samples and deviations with respect to
 the old ones, while such a value of 
\begin_inset Formula $\gamma$
\end_inset

 induces a timeout margin directly proportional to the weight of fluctuations.
 As reccomended, the initial timeout value is set to 1 second.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:Adaptive Timeout Behaviour"

\end_inset

 plots the bahaviour of 
\shape slanted
extRTT
\shape default
 
\shape slanted
devRTT
\shape default
 ad 
\shape slanted
Timeout
\shape default
, letting us appreciate the advantages of such a predictive model.
 Indeed, it highlights the initial exploration of the RTT variability space
 and the subsequent adaptations.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/rusp_timeout.png
	lyxscale 72
	scale 72

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Adaptive Timeout Behaviour
\begin_inset CommandInset label
LatexCommand label
name "Figure:Adaptive Timeout Behaviour"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
The RUSP Segment Structure
\end_layout

\begin_layout Standard
RUSP allows two processes to communicate through segments exchange, thus
 encapsulating upper-layer data and control data into a RUSP segment.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:RUSP Segment Structure"

\end_inset

 shows the general RUSP segment structure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="32">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="left" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="middle" width="0.3cm">
<column alignment="center" valignment="middle" width="0.3cm">
<column alignment="center" valignment="middle" width="0.3cm">
<column alignment="center" valignment="middle" width="0.3cm">
<column alignment="left" valignment="middle" width="0.3cm">
<column alignment="center" valignment="middle" width="0.3cm">
<column alignment="center" valignment="middle" width="0.3cm">
<column alignment="center" valignment="middle" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="center" valignment="top" width="0.3cm">
<column alignment="right" valignment="top" width="0.3cm">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
use_makebox 0
width "4cm"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\paragraph_spacing onehalf
\align center
Source port
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
use_makebox 0
width "4cm"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\paragraph_spacing onehalf
\align center
Destination port
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
use_makebox 0
width "2cm"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\paragraph_spacing onehalf
\align center
Checksum
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ERR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
KLV
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PSH
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CACK
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SACK
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RST
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FIN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SYN
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
use_makebox 0
width "4cm"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\paragraph_spacing onehalf
\align center
Payload size
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
use_makebox 0
width "8cm"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\paragraph_spacing onehalf
\align center
Sequence number
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
use_makebox 0
width "8cm"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\paragraph_spacing onehalf
\align center
Acknowledge number
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
use_makebox 0
width "8cm"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\paragraph_spacing onehalf
\align center
\begin_inset VSpace 0.75cm
\end_inset

Payload
\begin_inset VSpace 0.75cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RUSP Segment Structure
\begin_inset CommandInset label
LatexCommand label
name "Figure:RUSP Segment Structure"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
source/destination port (16 bits each): used for multiplexing/demultiplexing
 data from/to the application layer.
\end_layout

\begin_layout Itemize
checksum (8 bits): used for segment content error detection.
 It is computed on the sender side as the 1's complement of the sum of all
 the 16-bit words in the segment, with the wrapping around of any encountered
 overflow.
 As some UDP implementations do, RUSP does not provide any procedure to
 recover from a detected error, it simply discards every corrupted segments.
\end_layout

\begin_layout Itemize
control flags (8 bits): characterizes the segment's purpose.
\end_layout

\begin_deeper
\begin_layout Itemize
SYN: used for connection establishment.
\end_layout

\begin_layout Itemize
FIN: used for connection shutdown.
\end_layout

\begin_layout Itemize
RST: used for connection establishment recovery.
\end_layout

\begin_layout Itemize
SACK: used for selective acknowledgement.
\end_layout

\begin_layout Itemize
CACK: used for cumulative acknowledgement.
\end_layout

\begin_layout Itemize
PSH: used to push data to the upper layer.
\end_layout

\begin_layout Itemize
KLV: used to keep-alive the peer.
\end_layout

\begin_layout Itemize
ERR: used for local error notifications.
\end_layout

\end_deeper
\begin_layout Itemize
length (16 bits): indicates the payload size.
\end_layout

\begin_layout Itemize
sequence/acknowledgement number (32 bits each): used for the implementation
 of the reliable data service.
\end_layout

\begin_layout Paragraph
Header Overhead
\end_layout

\begin_layout Standard
RUSP minimizes the header overhead, with respect to TCP: indeed, it has
 only 16 bytes of overhead in every segment, whereas the TCP segment has
 a 40 bytes of overhead.
\end_layout

\begin_layout Paragraph
Note about the current implementation
\end_layout

\begin_layout Standard
The current RUSP implementation provided by 
\shape slanted
librusp
\shape default
 builds the protocol on top of UDP, thus imposing, for now, some segment
 structure modifications.
 The source/destination port fields and the checksum field are included
 into the UDP header; moreover, the UDP header provides a 16-bits long length
 field and a 16-bits long checksum field instead of the above declared 12-bits.
 Futhermore, the current release of librusp does not make use of RST, KLV
 an ERR flags, See section 4 for futher details about future improvements.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
The Sender/Receiver Pseudo-Code
\end_layout

\begin_layout Paragraph
Sender-Side 
\end_layout

\begin_layout Standard
The sender waits for data, loaded into the user buffer from the upper layer.
 As data has been detected, it creates a new segment with the maximum amount
 of data provided by the protocol, then waits for the necessary send-side
 sliding window's space.
 As the sliding window permits it (thus, when send-base has been acked),
 the sender buffers the new segment and sends it, then slides the send-next
 pointer.
 At the end, it pops the sent data from the user buffer.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "Algorithm:Sender Pseudo-code"

\end_inset

 shows the pseudo-code of the RUSP sender.
\end_layout

\begin_layout Paragraph
Receiver-Side
\end_layout

\begin_layout Standard
The receiver performs a timeout listen for incoming segments.
 If a segment is received, this segment is matched against the receive-side
 sliding window: an after-window segment is always ignored, a before-window
 segment is always CACKed, while an inside-window segment is always SACKed
 and processed.
 In case of an inside-window segment, its ACK field is always appropriately
 submitted to the send-side segment buffer (considered as SACK, if the SACK
 field is flagged, considered as CACK, if the CACK file is flagged).
 If the segment matches the receive-side window-base, then it is processed
 as an in-order segment, and the receive-side window is slided.
 Of corse, in case of a receive-side window-base match, the receive-side
 segment buffer is opportunely processed, looking for the next base.
 If the segment does not match the receive-side window-base, then it is
 buffered.
 If the timeout expires before receiving a segment, the sender induces the
 retransmission of the opportune unacknowledged segments.
 In the case of peer disconnection, the sender induces the connection shutdown.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "Algorithm:Receiver Pseudo-code"

\end_inset

, shows the pseudo-code of the RUSP receiver.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

while true:
\end_layout

\begin_layout Plain Layout

 waitDataFromUserBuff;
\end_layout

\begin_layout Plain Layout

 createSegment;
\end_layout

\begin_layout Plain Layout

 waitSndWindowSpace;
\end_layout

\begin_layout Plain Layout

 addToSndSegmentBuff;
\end_layout

\begin_layout Plain Layout

 sendSegment;
\end_layout

\begin_layout Plain Layout

 slideSndWindowNext;
\end_layout

\begin_layout Plain Layout

 popDataFromUserBuff;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sender Pseudo-code
\begin_inset CommandInset label
LatexCommand label
name "Algorithm:Sender Pseudo-code"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

while true:
\end_layout

\begin_layout Plain Layout

 receiveSegment;
\end_layout

\begin_layout Plain Layout

 if not received:
\end_layout

\begin_layout Plain Layout

  timeoutFunc;
\end_layout

\begin_layout Plain Layout

  continue;
\end_layout

\begin_layout Plain Layout

 if disconnected:
\end_layout

\begin_layout Plain Layout

  closeConnection;
\end_layout

\begin_layout Plain Layout

  break;
\end_layout

\begin_layout Plain Layout

 if segmentInsideWindow:
\end_layout

\begin_layout Plain Layout

  sendSAck;
\end_layout

\begin_layout Plain Layout

  submitAck;
\end_layout

\begin_layout Plain Layout

  if segmentIsRcvWindowBase:
\end_layout

\begin_layout Plain Layout

   processBase;
\end_layout

\begin_layout Plain Layout

   slideRcvWindowBase;
\end_layout

\begin_layout Plain Layout

   while rcvBaseInSegmentBuff:
\end_layout

\begin_layout Plain Layout

    processBase;
\end_layout

\begin_layout Plain Layout

    slideRcvWindowBase;
\end_layout

\begin_layout Plain Layout

  else:
\end_layout

\begin_layout Plain Layout

   addSegmentToSegmentBuff;
\end_layout

\begin_layout Plain Layout

 else if segmentBeforeRcvWindow:
\end_layout

\begin_layout Plain Layout

   sendCAck;
\end_layout

\begin_layout Plain Layout

 else:
\end_layout

\begin_layout Plain Layout

   doNothing;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Receiver Pseudo-code
\begin_inset CommandInset label
LatexCommand label
name "Algorithm:Receiver Pseudo-code"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
The 
\shape slanted
librusp
\shape default
 Library
\end_layout

\begin_layout Standard
The 
\shape slanted
librusp
\shape default
 is the official C static library that implements the RUSP transport protocol.
 As a free open source project, it can be consulted and downloaded from
 
\end_layout

\begin_layout Standard
\align center

\shape slanted
http://github.com/giacomomarciani/rusp
\shape default
.
 
\end_layout

\begin_layout Standard
If you would like to build your own RUSP-based network application, you
 first need to install 
\shape slanted
librusp
\shape default
 on your UNIX system running the make utility, as usual, then link it by
 specifying the linkage directive 
\shape slanted
-lrusp
\shape default
.
\end_layout

\begin_layout Standard
In this section we are going to show the library's architecture and the
 functions provided by the library's API.
\end_layout

\begin_layout Subsection
The Architecture
\end_layout

\begin_layout Standard
The librusp arcitecture builds the RUSP protocol on top of UDP, realized
 by the BSD API on SOCK_DGRAM socket layer.
 The architecture consists of an API layer that allows the network application
 to interface to the Core layer, wich realizes the RUSP reliable service-model.
\end_layout

\begin_layout Standard
As RUSP is a connection-oriented protocol, the main architecture's entity
 is the Connection, wich is references and managed inside a Connections
 Pool.
 A Connection is a thread-safe structure that implements the RUSP FSA, realizing
 the communication service with data buffers, segment sbuffer and sliding-window
s.
\end_layout

\begin_layout Standard
The following Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:RUSP Architecture"

\end_inset

 shows the RUSP architecture model.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/rusp_arch.png
	lyxscale 30
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RUSP Architecture
\begin_inset CommandInset label
LatexCommand label
name "Figure:RUSP Architecture"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The API
\end_layout

\begin_layout Standard
The 
\shape slanted
librusp
\shape default
 API is mainly inspired by the BSD API's system calls for SOCK_STREAM sockets.
 From the application layer perspective, a 
\shape slanted
librusp
\shape default
 connection is nothing more than a positive integer, thus allowing an easy
 connection referenciation in every call.
 Futhermore, the 
\shape slanted
librusp
\shape default
 API exposes a little set of accessible developer utilities.
\end_layout

\begin_layout Standard
Let us now show the librusp API calls for the connection establishment 
\shape slanted
ruspListen(), ruspAccept(), ruspConnect()
\shape default
, connection shutdown 
\shape slanted
ruspClose()
\shape default
 , connection I/O 
\shape slanted
ruspReceive(), ruspSend()
\shape default
 and connection end-points identification 
\shape slanted
ruspLocal()
\shape default
, 
\shape slanted
ruspPeer()
\shape default
.
 At the end of this section we will show the 
\shape slanted
librusp
\shape default
 developer utility calls 
\shape slanted
ruspSetAttr()
\shape default
, 
\shape slanted
ruspGetAttr()
\shape default
.
\end_layout

\begin_layout Subsubsection
Listening for Incoming Connections
\end_layout

\begin_layout Standard
The 
\shape slanted
listen()
\shape default
 function creates a new listening connection, binding it to the specified
 port number.
 The connection can be subsequentely used to accept incoming connection.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
#include <rusp.h>
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
ConnectionId 
\series bold
ruspListen
\series default
(const int port);
\end_layout

\begin_layout Plain Layout
\align right
Returns a positive connection id, or -1 on error.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function takes 
\shape slanted
port
\shape default
 as the local port number where the new listening connection will be bound
 to, and returns the connection id of the newly created listening connection.
 
\end_layout

\begin_layout Standard
The current version of 
\shape slanted
librusp
\shape default
 does not provide any kind of 
\shape slanted
backlog
\shape default
 management nor any kind of its optimization, but makes up for this lack
 by ensuring an expansion of the synchronization timeout and a failure-tolerance
 mechanism based on automatic resynchronization.
 See Section 4 for future improvements about listening backlog.
\end_layout

\begin_layout Subsubsection
Accepting a Connection
\end_layout

\begin_layout Standard
The 
\shape slanted
accept()
\shape default
 function lets a listening connection accept an incoming connection.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
#include <rusp.h>
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
ConnectionId 
\series bold
ruspAccept
\series default
(ConnectionId connid);
\end_layout

\begin_layout Plain Layout
\align right
Returns a positive connection id, or -1 on error.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
The 
\shape slanted
connid
\shape default
 is the id of a listening connection, through wich we wish to accept the
 next incoming connection.
 If there is no pending connection, the function blocks until the synchronizatio
n handshake has been successfully completed, then returns the id of the
 newly established connection.
 Once established, the new connection can be used to perform I/O operations,
 or can be closed.
 Any attempt to accept incoming connections on a not listening connection
 will always fail.
\end_layout

\begin_layout Subsubsection
Connecting to a peer 
\end_layout

\begin_layout Standard
The 
\shape slanted
connect()
\shape default
 function creates a new established connection with the peer listening on
 the specified address.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
#include <rusp.h>
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
ConnectionId 
\series bold
ruspConnect
\series default
(const char *ip, const int port);
\end_layout

\begin_layout Plain Layout
\align right
Returns a positive connection id, or -1 on error.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function takes 
\shape slanted
ip
\shape default
 and 
\shape slanted
port
\shape default
, respectively, as the address and port number of the peer we wish to establish
 the connection to, and return the newly created established connection,
 or -1 in case of connection failure.
 In case of connection failure, nothing more than calling 
\shape slanted
ruspConnect()
\shape default
 once again is needed.
 Once established, the connection can be used to perform I/O operations,
 or can be closed.
 
\end_layout

\begin_layout Subsubsection
Closing a Connection
\end_layout

\begin_layout Standard
The 
\shape slanted
close() 
\shape default
function closes the specified connection.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
#include <rusp.h>
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
void 
\series bold
ruspClose
\series default
(ConnectionId connid);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
The 
\shape slanted
connid
\shape default
 is the id of the connection we want to close.
 The function blocks until the shutdown handshake has been successfully
 completed.
\end_layout

\begin_layout Standard
Once a connection has been closed, any futher attempt to accept or perform
 an I/O operation though it will always fail.
 Futhermore, any attempt to create an incarnation will fail during all the
 time necessary to its TIMEWT state.
\end_layout

\begin_layout Standard
Remember that, every open connection, either a listening or an established
 one, strictly needs to be closed to release all the associated system resources.
\end_layout

\begin_layout Subsubsection
Connection I/O
\end_layout

\begin_layout Standard
The 
\shape slanted
ruspReceive()
\shape default
 and 
\shape slanted
ruspSend()
\shape default
 functions allow the data I/O through an established connection.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
#include <rusp.h>
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
ssize_t 
\series bold
ruspReceive
\series default
(ConnectionId connid, char *msg, size_t msgs);
\end_layout

\begin_layout Plain Layout
\align right
Returns number of bytes received, 0 on EOF, or -1 on error.
\end_layout

\begin_layout Plain Layout
ssize_t 
\series bold
ruspSend
\series default
(ConnectionId connid, char *msg, size_t msgs);
\end_layout

\begin_layout Plain Layout
\align right
Returns number of bytes sent, or -1 on error.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For both functions, 
\shape slanted
connid
\shape default
 is the id of the established connection we want to perform the I/O, 
\shape slanted
msg
\shape default
 is the message buffer, and 
\shape slanted
msgs
\shape default
 is the message buffer size, thus the maximum allowed message size for the
 current I/O.
 
\end_layout

\begin_layout Standard
For both function, the return value is the factual number of bytes involved
 in the current I/O, or -1 if an error occurred during the current I/O .
 Futhermore, the 
\shape slanted
ruspReceive()
\shape default
 function provides an easy way to detect the peer intention to stop sending
 data and to close the connection: indeed when the peer actively closes
 the connection, every local attempt to receive data through the connection
 will return EOF.
\end_layout

\begin_layout Standard
These functions let us perceive the advantage of a connection model built
 on top of a connected datagram socket.
 Now, we can use a simpler I/O model when trasmitting data on the connection:
 indeed, we don't need to specify nor the destination address neither its
 size, anymore.
 This I/O model is primarly useful in an application that needs to send
 multiple datagrams to a single peer, wich is the typical scenario in a
 client-server model implementation.
 Futhermore, as stated in 
\begin_inset CommandInset citation
LatexCommand cite
key "The Linux Programming Interface"

\end_inset

, on some TCP/IP implementations, connecting a datagram socket to a peer
 yields an I/O sensitive performance improvement.
\end_layout

\begin_layout Subsubsection
Addresses
\end_layout

\begin_layout Standard
The 
\shape slanted
ruspLocal()
\shape default
 and 
\shape slanted
ruspPeer()
\shape default
 functions allow to respectively retrieve the address of the connection
 end-points.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
#include <rusp.h>
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
int 
\series bold
ruspLocal
\series default
(const ConnectionId connid, struct sockaddr_in *addr);
\end_layout

\begin_layout Plain Layout
\align right
Returns 0 on success, -1 on error.
\end_layout

\begin_layout Plain Layout
int 
\series bold
ruspPeer
\series default
(const ConnectionId connid, struct sockaddr_in *addr);
\end_layout

\begin_layout Plain Layout
\align right
Returns 0 on success, -1 on error.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For both functions, 
\shape slanted
connid
\shape default
 is the id of the connection we want to know the end-point address, and
 
\shape slanted
addr
\shape default
 is the argument-value address requested.
 Notice that the 
\shape slanted
ruspLocal()
\shape default
 function will always succeed when called on a not closed connection: indeed
 every not closed connection has an underlying open datagram socket, that
 is every not closed connection is associated to a local address.
 On the other hand, the 
\shape slanted
ruspPeer()
\shape default
 function will always fail when called on a listening or closed connection:
 indeed a listening connection has an underlying open but unconnected datagram
 socket, while a closed connection does not have any open datagram socket,
 that is they are not associated to any specific peer address.
\end_layout

\begin_layout Subsubsection
Developer utilities
\end_layout

\begin_layout Standard
The 
\shape slanted
ruspSetAttr()
\shape default
 and 
\shape slanted
ruspGetAttr()
\shape default
 functions allow to respectively set and retrieve librusp attributes, such
 as segment drop rate and debug mode.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
#include <rusp.h>
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
int 
\series bold
ruspSetAttr
\series default
(const RUSPAttr attr, const void *value);
\end_layout

\begin_layout Plain Layout
int 
\series bold
ruspGetAttr
\series default
(const RUSPAttr attr, const void *value);
\end_layout

\begin_layout Plain Layout
\align right
Returns 0 on success, -1 on error.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For both functions, 
\shape slanted
attr
\shape default
 is the name of the attribute to set or retrieve.
 In the 
\shape slanted
ruspSetAttr()
\shape default
 function, value is the new attribute value, while in 
\shape slanted
ruspGetAttr()
\shape default
 value is the current attribute value.
 Let us now show some get/setable 
\shape slanted
librusp
\shape default
 attributes.
\end_layout

\begin_layout Standard

\shape slanted
RUSP_ATTR_DROP
\shape default
 allows to set the uniform probability of segment drop.
 As a reliable transport protocol, nothing is more important than valuate
 its reaction to segments loss and local segment drop.
 A non-zero drop rate provides an easy way to simulate these transmission
 lacks.
 Every RUSP session comes with a 
\shape slanted
drop
\shape default
 default value of 0.0, that is no segment drop imposition.
\end_layout

\begin_layout Standard

\shape slanted
RUDP_ATTR_DGB
\shape default
 allows to activate or deactivate the debug mode.
 As a case-study protocol, nothing is more important than exploring what
 is happening under the hood.
 The debug mode provides an easy way to visualize the real-time segment
 exchange.
 Every RUSP session comes with a deactivated debug mode, that is no segment
 exchange visualization.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
A 
\shape slanted
librusp
\shape default
 Client-Server Example
\end_layout

\begin_layout Standard
We now show an implementative example of a client-server model, based on
 
\shape slanted
librusp
\shape default
.
 The considered scenario is the typical service provided by a concurrent
 echo server.
 The client and the server both employ the header file shown in Algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "Algorithm:common.h"

\end_inset

, wich defines the server's address and port number and the maximum size
 of exchangeable messages.
 The server and the client ar, respectively, implemented by the algorithm
 shown in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "Algorithm:server.c"

\end_inset

 and Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "Algorithm:client.c"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <rusp.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define ADDR "192.168.1.121" //The server address
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define PORT 55000           //The server port
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define MSGS 1024            //The maximum message size
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
common.h
\begin_inset CommandInset label
LatexCommand label
name "Algorithm:common.h"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Server side 
\end_layout

\begin_layout Standard
The server opens a connection (
\shape slanted
lconn
\shape default
) listening on port 55000, allowing the acceptance of incoming concurrent
 connections.
 As a new connection request arrives, the server accepts it by allocating
 the service process that will communicate with the client through the new
 connection (
\shape slanted
aconn
\shape default
).
 At this point, the listening process no longer needs the active connection,
 as well the service process will no longer needs the listening connection:
 so they close these redundant connections in their own process space.
\end_layout

\begin_layout Standard
From now on, the listening process will continue its acceptance cycle, whereas
 the service process will echo the received data, as long as the client
 does not require the active close of the connection.
\end_layout

\begin_layout Standard
When the client requess the active close of the connection, the service
 process will be notified by an EOF on its reading attempt, and proceeds
 to the passive close of the connection, thus finishing its service cycle
 .
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <common.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void) {
\end_layout

\begin_layout Plain Layout

 ConnectionId lconn, aconn;
\end_layout

\begin_layout Plain Layout

 char rcvdata[MSGS]
\end_layout

\begin_layout Plain Layout

 ssize_t rcv;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 lconn = ruspListen(PORT);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 while(aconn = ruspAccept()) {    
\end_layout

\begin_layout Plain Layout

  switch (fork()) {     
\end_layout

\begin_layout Plain Layout

  case 0:
\end_layout

\begin_layout Plain Layout

   ruspClose(lconn);
\end_layout

\begin_layout Plain Layout

   while ((rcv = ruspReceive(aconn, rcvdata, MSGS)) > 0)
\end_layout

\begin_layout Plain Layout

    ruspSend(aconn, rcvdata, rcv);
\end_layout

\begin_layout Plain Layout

   ruspClose(aconn);
\end_layout

\begin_layout Plain Layout

   break;
\end_layout

\begin_layout Plain Layout

  case 1:
\end_layout

\begin_layout Plain Layout

   ruspClose(aconn);
\end_layout

\begin_layout Plain Layout

   break;
\end_layout

\begin_layout Plain Layout

  case -1:
\end_layout

\begin_layout Plain Layout

   ERREXIT("Cannot fork.");
\end_layout

\begin_layout Plain Layout

   break;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 exit(EXIT_SUCCESS);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
server.c
\begin_inset CommandInset label
LatexCommand label
name "Algorithm:server.c"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Client side 
\end_layout

\begin_layout Standard
The client actively opens a connection (
\shape slanted
conn
\shape default
) with the server, on the known ip and port.
 Once established, as long as the user types something on stdin, the input
 (snddata) will be sent to the server, then blocks until receiving the server
 response (
\shape slanted
rcvdata
\shape default
).
 When the client has no more data to send, it proceeds with the active close
 of the connection, waiting for the passive close from the server side.
 Once the passive close has been received, the connection will be definetedly
 closed.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <common.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void) {
\end_layout

\begin_layout Plain Layout

 ConnectionId conn;
\end_layout

\begin_layout Plain Layout

 char snddata[MSGS], rcvdata[MSGS];
\end_layout

\begin_layout Plain Layout

 ssize_t snd, rcv;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 conn = ruspConnect(ADDRESS, PORT);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 while ((snd = getUserInput("[SND]>", snddata, MSGS)) > 0) {
\end_layout

\begin_layout Plain Layout

  ruspSend(conn, snddata, snd);
\end_layout

\begin_layout Plain Layout

  if ((rcv = ruspReceive(conn, rcvdata, MSGS)) > 0)
\end_layout

\begin_layout Plain Layout

   printf("[RCV] %.*s
\backslash
n", (int)rcv, rcvdata);
\end_layout

\begin_layout Plain Layout

  else
\end_layout

\begin_layout Plain Layout

   break;
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 ruspClose(conn);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 exit(EXIT_SUCCESS);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
client.c
\begin_inset CommandInset label
LatexCommand label
name "Algorithm:client.c"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
The Experimental Results
\end_layout

\begin_layout Standard
We now show the experimental results of using 
\shape slanted
librusp
\shape default
 in the typical scenario of a 100MB file transfer.
 
\end_layout

\begin_layout Standard
The testing environment consists of a server Ubuntu 14.10 Intel Core i5-3317U
 1.70GHz 4GB and a client Lubuntu 14.10 Intel Atom N280 1.66GHz 1GB connected
 to the same WLAN through a router Technicolor TG784Nv3.
 
\end_layout

\begin_layout Standard
The purpose of the following tests is to verify the protocol robustness
 in response to segment loss, to optimize the sliding-window size and highlight
 any thread-balancing lack.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:RUSP Speed Test"

\end_inset

 shows the transmission speeds in function of segment loss and sliding-window
 size, and Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:RUSP and Threads Balance"

\end_inset

 shows the thread balancing detected by GNUProf on 1000 iterations.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/rusp_speed_test.png
	lyxscale 72
	scale 72

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RUSP Speed Test
\begin_inset CommandInset label
LatexCommand label
name "Figure:RUSP Speed Test"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="5">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Winwow Size
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10.0%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20.0%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30.0%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
86864 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
71559 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
59355 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
46276.330892 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
86638 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
71029 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
59943.669012 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47446.429381 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
86454 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
72525 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
60937.425846 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47326.307728 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
86271 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
71229 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
60062.997399 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
46443.643744 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
86698 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
73607 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
60322.849543 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47030.700077 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
86440 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
70434 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
59895.600172 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47307.077203 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
85219 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
71457 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
59449.129365 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47060.995322 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RUSP Speed Test (tabular)
\begin_inset CommandInset label
LatexCommand label
name "Figure:RUSP Speed Test Tabular"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/rusp_threads_balance.png
	lyxscale 72
	scale 72

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RUSP and Threads-Balance
\begin_inset CommandInset label
LatexCommand label
name "Figure:RUSP and Threads Balance"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Conclusions
\end_layout

\begin_layout Standard
The recorded transmission rates prove the protocol robustness against segments
 loss and endorse our theoretical expectations about the sliding window.
 However, the library turns out to be less powerful than the solution provided
 by the BSD's implementation of TCP, as well as suffering from a thread
 load imbalancing.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Future Improvements
\end_layout

\begin_layout Standard
We briefly present some planned improvements for future versions of the
 RUSP protocol and 
\shape slanted
librusp
\shape default
.
 The main changes will concern the now unused control flags provided by
 the segment structure, the connection establishment procedure, the 
\shape slanted
librusp
\shape default
 architecture layering and the 
\shape slanted
librusp
\shape default
 thread load-balancing.
\end_layout

\begin_layout Paragraph
Control Flags
\end_layout

\begin_layout Standard
RUSP will make use of the RST flag to recover from half-open connections,
 the KLV flag to keep-alive a long-silent peer, and the ERR flag to notify
 local error conditions.
\end_layout

\begin_layout Paragraph
Backlog
\end_layout

\begin_layout Standard
RUSP will provide a dynamic backlog upper bound to accept large numbers
 of concurrent incoming connections.
 As stated in 
\begin_inset CommandInset citation
LatexCommand cite
key "The Linux Programming Interface"

\end_inset

, the original BSD implementation provided a backlog upper bound set to
 5, while modern Linux implementations set it to 128.
 Although these famous implementative decisions, we strongly believe that
 the backlog upper bound must be dynamically computed to minimize unserviceable
 incoming connections.
\end_layout

\begin_layout Paragraph
RUSP/IP
\end_layout

\begin_layout Standard

\shape slanted
librusp
\shape default
 will no longer build its reliable service-layer on top of a BSD's SOCK_DGRAM
 unrealible layer, but directly on the IP's.
\end_layout

\begin_layout Paragraph
Thread Balancing
\end_layout

\begin_layout Standard
The experimental results shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Figure:RUSP and Threads Balance"

\end_inset

 highlight a severe thread load-imbalancing.
 Future versions of 
\shape slanted
librusp
\shape default
 will solve this kind of lack by increasing cooperation between send-side
 and receive-side threads.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Computer Networking"

\end_inset

J.
 F.
 Kurose, K.
 W.
 Ross, : 
\shape slanted
Computer Networking, a top-down approach
\shape default
, 6th Edition, Pearson, October 2010.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "The Linux Programming Interface"

\end_inset

M.
 Kerrisk: 
\shape slanted
The Linux Programming Interface
\shape default
, 1st Edition, No Starch Press, October 2010.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Transmission Control Protocol"

\end_inset

J.
 Postel: 
\shape slanted
Transmission Control Protocol
\shape default
, RFC 793, September 1981.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "User Datagram Protocol"

\end_inset

J.
 Postel: 
\shape slanted
User Datagram Protocol
\shape default
, RFC 768, August 1980.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Reliable User Datagram Protocol"

\end_inset

T.
 Bova, T.
 Krivoruchka: 
\shape slanted
Reliable UDP Protocol
\shape default
, Internet Draft, Feburary 1999.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "TCP Selective acknowledgement Options"

\end_inset

M.
 Mathis, J.
 Mahdavi, S.
 Floyd, A.
 Romanow: 
\shape slanted
TCP Selective Acknowledgment Options
\shape default
, RFC 2018, October 1996.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "An Extension to the Selective Acknowledgement (SACK) Option for TCP"

\end_inset

M.
 Mathis, J.
 Mahdavi, S.
 Floyd, M.
 Podolsky: 
\shape slanted
An Extension to the Selective Acknowledgement (SACK) Option for TCP
\shape default
, RFC 2883, July 2000.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Computing TCP's Retransmission Timer"

\end_inset

V.
 Paxson, M.
 Allman, J.
 Chu, M.
 Sargent: 
\shape slanted
Computing TCP's Retransmission Timer
\shape default
, RFC 6298, June 2011.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Defending against Sequence Number Attacks"

\end_inset

F.
 Gont, S.
 Bellovin: 
\shape slanted
Defending against Sequence Number Attacks
\shape default
, RFC 6528, February 2012.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "The MD5 Message-Digest Algorithm"

\end_inset

R.
 Rivest: 
\shape slanted
The MD5 Message-Digest Algorithm
\shape default
, RFC 1321, April 1992.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Requirements for Internet Hosts Communication Layers"

\end_inset

R.
 Branden: 
\shape slanted
Requirements for Internet Hosts Communication Layers
\shape default
, RFC 1122, October 1989.
\end_layout

\end_body
\end_document
